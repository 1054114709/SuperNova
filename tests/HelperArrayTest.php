<?php

/**
 * Class HelperArrayTest
 *
 * @cover HelperArray
 */
class HelperArrayTest extends PHPUnit_Framework_TestCase {

  public function setUp() {
    parent::setUp(); // TODO: Change the autogenerated stub
  }

  /**
   * @cover ::StringToArray
   * @cover ::stringToArrayFilterEmpty
   */
  public function testStringToArray() {
    // Only string would be converted to array
    $this->assertEquals(array(), HelperArray::stringToArray(123));

    // Empty data would be converted to empty array()
    $this->assertEquals(array(), HelperArray::stringToArray(''));

    // One element string
    $this->assertEquals(array('123'), HelperArray::stringToArray('123'));

    // Two element string
    $this->assertEquals(array('123', '234'), HelperArray::stringToArray('123,234'));

    // Specified delimiter
    $this->assertEquals(array('123;234'), HelperArray::stringToArray('123;234'));
    $this->assertEquals(array('123', '234'), HelperArray::stringToArray('123;234', ';'));
  }


  /**
   * @cover ::makeArray
   */
  public function testMakeArray() {
    // Straightforward: just array
    $this->assertEquals(array('test'), HelperArray::makeArray($test = array('test')));

    // Value with default index
    $this->assertEquals(array(0 => 'test'), HelperArray::makeArray($test = 'test'));

    // Value with non-default index
    $this->assertEquals(array(1 => 'test'), HelperArray::makeArray($test = 'test', 1));
  }

  /**
   * @cover ::filter
   */
  public function testFilter() {
    $callback = function ($value) {
      return !empty($value);
    };

    // Not array
    $this->assertEquals(array(), HelperArray::filter($test = 1, $callback));

    // Empty array
    $this->assertEquals(array(), HelperArray::filter($test = array(), $callback));

    // Not empty array with one empty element
    $this->assertEquals(array(), HelperArray::filter($test = array(''), $callback));

    // Not empty array with one filterable element
    $this->assertEquals(array('test'), HelperArray::filter($test = array('test', ''), $callback));

    // Not empty array with both filterable elements
    $this->assertEquals(array(), HelperArray::filter($test = array('0', ''), $callback));
  }

  /**
   * @cover ::isNotEmpty
   * @cover ::stringToArrayFilterEmpty
   */
  public function testIsNotEmpty() {
    $tested = new HelperArray();

    // Not empty
    $this->assertTrue(invokeMethod($tested, 'isNotEmpty', array('1')));

    // Empty
    $this->assertFalse(invokeMethod($tested, 'isNotEmpty', array('0')));
  }

  /**
   * @cover ::filterEmpty
   * @cover ::stringToArrayFilterEmpty
   */
  public function testFilterEmpty() {
    // Not array
    $this->assertEquals(array(), HelperArray::filterEmpty($test = 1));

    // Empty array
    $this->assertEquals(array(), HelperArray::filterEmpty($test = array()));

    // Not empty array with one empty element
    $this->assertEquals(array(), HelperArray::filterEmpty($test = array('')));

    // Not empty array with one filterable element
    $this->assertEquals(array('test'), HelperArray::filterEmpty($test = array('test', '')));

    // Not empty array with both filterable elements
    $this->assertEquals(array(), HelperArray::filterEmpty($test = array('0', '')));
  }


  /**
   * @cover ::stringToArrayFilterEmpty
   */
  public function testStringToArrayFilterEmpty() {
    // Not string
    $this->assertEquals(array(), HelperArray::stringToArrayFilterEmpty(1));

    // Empty string
    $this->assertEquals(array(), HelperArray::stringToArrayFilterEmpty(''));
  }


  public function tearDown() {
    parent::tearDown(); // TODO: Change the autogenerated stub
  }

}

<?php

/**
 * Class HelperArrayTest
 *
 * @coversDefaultClass HelperArray
 */
class HelperArrayTest extends PHPUnit_Framework_TestCase {

  public function setUp() {
    parent::setUp(); // TODO: Change the autogenerated stub
  }

  public function tearDown() {
    parent::tearDown(); // TODO: Change the autogenerated stub
  }

  public function dataStringToArray() {
    return array(
      array(123, ',', array()), // Only string would be converted to array
      array('', ',', array()), // Empty data would be converted to empty array()
      array('123', ',', array('123')), // One element string
      array('123,234', ',', array('123', '234')), // Two element string
      array('123;234', ';', array('123', '234')), // Specified delimiter
    );
  }

  /**
   * @param string $value
   * @param string $delimiter
   * @param array  $expected
   *
   * @dataProvider dataStringToArray
   *
   * @covers ::stringToArray
   */
  public function testStringToArray($value, $delimiter, $expected) {
    $this->assertEquals($expected, HelperArray::stringToArray($value, $delimiter));
  }


  public function dataMakeArray() {
    return array(
      array(array('test'), 0, array('test')), // Straightforward: just array
      array('test', 0, array(0 => 'test')), // Value with default index
      array('test', 1, array(1 => 'test')), // Value with non-default index
    );
  }

  /**
   * @dataProvider dataMakeArray
   *
   * @covers ::makeArrayRef
   */
  public function testMakeArrayRef($value, $index, $expected) {
    HelperArray::makeArrayRef($value, $index);
    $this->assertEquals($expected, $value);
  }

  /**
   * @dataProvider dataMakeArray
   *
   * @covers ::makeArray
   */
  public function testMakeArray($value, $index, $expected) {
    $this->assertEquals($expected, HelperArray::makeArray($value, $index));
  }

  public function dataFilter() {
    $callback = function ($value) {
      return !empty($value);
    };

    return array(
      array(1, $callback, array()), // Not array
      array(array(), $callback, array()), // Empty array
      array(array(''), $callback, array()), // Not empty array with one empty element
      array(array('0', ''), $callback, array()), // Not empty array with both filterable elements
      array(array('test', ''), $callback, array(0 => 'test')), // Not empty array with one filterable element
      array(array('test1', '', 'test2'), $callback, array(0 => 'test1', 1 => 'test2')),
      array(array('test1', 'test', 'test2'), $callback, array(0 => 'test1', 1 => 'test', 2 => 'test2')),
    );
  }

  /**
   * @param mixed    $value
   * @param callable $callback
   * @param array    $expected
   *
   * @dataProvider dataFilter
   *
   * @covers ::filter
   */
  public function testFilter($value, $callback, $expected) {
    $this->assertEquals($expected, HelperArray::filter($value, $callback));
  }

  /**
   * @param mixed    $value
   * @param callable $callback
   * @param array    $expected
   *
   * @dataProvider dataFilter
   *
   * @covers ::filterEmpty
   * @covers       Validators::isNotEmpty
   * @covers       Validators::isNotEmptyByRef
   * @covers ::filter
   */
  public function testFilterEmpty($value, $callback, $expected) {
    $this->assertEquals($expected, HelperArray::filterEmpty($value));
  }


  /**
   * @covers ::stringToArrayFilterEmpty
   * @covers ::stringToArray
   * @covers ::filterEmpty
   * @covers Validators::isNotEmpty
   * @covers ::filter
   */
  public function testStringToArrayFilterEmpty() {
    // Not string
    $this->assertEquals(array(), HelperArray::stringToArrayFilterEmpty(1));

    // Empty string
    $this->assertEquals(array(), HelperArray::stringToArrayFilterEmpty(''));
  }

  /**
   * @covers ::merge
   */
  public function testMerge() {
    // Testing ARRAY_REPLACE mode
    $array1 = array('a' => 'b');
    $array2 = array('c' => 'd', 0 => 10);
    HelperArray::merge($array1, $array2);
    $this->assertEquals($array2, $array1);

    // Testing ARRAY_MERGE mode
    // String keyed value should be replaced
    // Integer keyed value should be added and integer keys should be recalculated
    $array2 = array('c' => 'e', 0 => 20);
    HelperArray::merge($array1, $array2, HelperArray::ARRAY_MERGE);
    $this->assertEquals(array('c' => 'e', 0 => 10, 1 => 20), $array1);

    // First array is not an array
    $array1 = 1;
    $array2 = array('c' => 'd', 1 => 10);
    HelperArray::merge($array1, $array2, HelperArray::ARRAY_MERGE);
    $this->assertEquals(array(0 => 1, 'c' => 'd', 1 => 10), $array1);

  }

}

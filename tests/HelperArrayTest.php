<?php

/**
 * Class HelperArrayTest
 *
 * @coversDefaultClass HelperArray
 */
class HelperArrayTest extends PHPUnit_Framework_TestCase {

  public function setUp() {
    parent::setUp(); // TODO: Change the autogenerated stub
  }

  public function tearDown() {
    parent::tearDown(); // TODO: Change the autogenerated stub
  }

  /**
   * @covers ::stringToArray
   * @covers ::stringToArrayFilterEmpty
   */
  public function testStringToArray() {
    // Only string would be converted to array
    $this->assertEquals(array(), HelperArray::stringToArray(123));

    // Empty data would be converted to empty array()
    $this->assertEquals(array(), HelperArray::stringToArray(''));

    // One element string
    $this->assertEquals(array('123'), HelperArray::stringToArray('123'));

    // Two element string
    $this->assertEquals(array('123', '234'), HelperArray::stringToArray('123,234'));

    // Specified delimiter
    $this->assertEquals(array('123;234'), HelperArray::stringToArray('123;234'));
    $this->assertEquals(array('123', '234'), HelperArray::stringToArray('123;234', ';'));
  }


  /**
   * @covers ::makeArrayRef
   * @covers ::makeArray
   */
  public function testMakeArray() {
    // Straightforward: just array
    $test = array('test');
    $this->assertEquals(array('test'), HelperArray::makeArray($test));

    // Value with default index
    $test = 'test';
    $this->assertEquals(array(0 => 'test'), HelperArray::makeArray($test));

    // Value with non-default index
    $test = 'test';
    $this->assertEquals(array(1 => 'test'), HelperArray::makeArray($test, 1));
  }

  /**
   * @covers ::filter
   */
  public function testFilter() {
    $callback = function ($value) {
      return !empty($value);
    };

    // Not array
    $test = 1;
    $this->assertEquals(array(), HelperArray::filter($test, $callback));

    // Empty array
    $test = array();
    $this->assertEquals(array(), HelperArray::filter($test, $callback));

    // Not empty array with one empty element
    $test = array('');
    $this->assertEquals(array(), HelperArray::filter($test, $callback));

    // Not empty array with one filterable element
    $test = array('test', '');
    $this->assertEquals(array('test'), HelperArray::filter($test, $callback));

    // Not empty array with both filterable elements
    $test = array('0', '');
    $this->assertEquals(array(), HelperArray::filter($test, $callback));
  }

  /**
   * @covers ::filterEmpty
   * @covers ::stringToArrayFilterEmpty
   */
  public function testFilterEmpty() {
    // Not array
    $this->assertEquals(array(), HelperArray::filterEmpty($test = 1));

    // Empty array
    $this->assertEquals(array(), HelperArray::filterEmpty($test = array()));

    // Not empty array with one empty element
    $this->assertEquals(array(), HelperArray::filterEmpty($test = array('')));

    // Not empty array with one filterable element
    $this->assertEquals(array('test'), HelperArray::filterEmpty($test = array('test', '')));

    // Not empty array with both filterable elements
    $this->assertEquals(array(), HelperArray::filterEmpty($test = array('0', '')));
  }


  /**
   * @covers ::stringToArrayFilterEmpty
   */
  public function testStringToArrayFilterEmpty() {
    // Not string
    $this->assertEquals(array(), HelperArray::stringToArrayFilterEmpty(1));

    // Empty string
    $this->assertEquals(array(), HelperArray::stringToArrayFilterEmpty(''));
  }

  /**
   * @covers ::merge
   */
  public function testMerge() {
    // Testing ARRAY_REPLACE mode
    $array1 = array('a' => 'b');
    $array2 = array('c' => 'd', 0 => 10);
    HelperArray::merge($array1, $array2);
    $this->assertEquals($array2, $array1);

    // Testing ARRAY_MERGE mode
    // String keyed value should be replaced
    // Integer keyed value should be added and integer keys should be recalculated
    $array2 = array('c' => 'e', 0 => 20);
    HelperArray::merge($array1, $array2, HelperArray::ARRAY_MERGE);
    $this->assertEquals(array('c' => 'e', 0 => 10, 1 => 20), $array1);
  }

}

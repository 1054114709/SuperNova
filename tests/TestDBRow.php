<?php

define('DEBUG_INIT_SKIP_SECONDARY', true);

require_once "../includes/init.php";

//$player = new Player();
//$player->db_load_by_id(2);
//$player->unitList->_dump();
//pvar_dump($player->player_bonus);


class TestDBRow extends DBRow {

  public static $_table = '';
  public static $_dbIdFieldName = 'id';
  public static $_properties = array(
    'dbId' => array(
      P_DB_FIELD => 'id',
    ),
  );

  public $_dbId;

  public function __construct() {
    parent::__construct();
  }

  public function __get($name) {
    return parent::__get($name); // TODO: Change the autogenerated stub
  }

  public function __set($name, $value) {
    parent::__set($name, $value); // TODO: Change the autogenerated stub
  }

  public function dbLoad($dbId, $lockSkip = false) {
    return parent::dbLoad($dbId, $lockSkip); // TODO: Change the autogenerated stub
  }

  public function dbSave() {
    parent::dbSave(); // TODO: Change the autogenerated stub
  }

  public function dbInsert() {
    return parent::dbInsert(); // TODO: Change the autogenerated stub
  }

  public function dbUpdate() {
    parent::dbUpdate(); // TODO: Change the autogenerated stub
  }

  public function dbDelete() {
    parent::dbDelete(); // TODO: Change the autogenerated stub
  }


  public function isNew() {
    return parent::isNew(); // TODO: Change the autogenerated stub
  }

  /**
   * Является ли запись пустой - т.е. при исполнении _dbSave должен быть удалён
   *
   * @return bool
   */
  public function isEmpty() {
    // TODO: Implement isEmpty() method.
  }

  public function dbRowParse(array $db_row) {
    parent::dbRowParse($db_row); // TODO: Change the autogenerated stub
  }

  public function dbMakeFieldSet($isUpdate = false) {
    return parent::dbMakeFieldSet($isUpdate); // TODO: Change the autogenerated stub
  }

  public function db_field_set_create(array $field_set) {
    return parent::db_field_set_create($field_set); // TODO: Change the autogenerated stub
  }
  public function db_field_update(array $field_set) {
    return parent::db_field_update($field_set); // TODO: Change the autogenerated stub
  }

  public function isFieldChanged($fieldName) {
    return parent::isFieldChanged($fieldName); // TODO: Change the autogenerated stub
  }

  /**
   * Lock all fields that belongs to operation
   *
   * @param int $dbId
   *
   * @return
   * param DBLock $dbRow - Object that accumulates locks
   *
   */
  public function dbGetLockById($dbId) {
    // TODO: Implement dbGetLockById() method.
  }
}

/*
lh__test

id
abigint
adatetime
astring
afloat
adecimal
res_metal
res_crystal

-- ----------------------------
-- Table structure for lh__test
-- ----------------------------
DROP TABLE IF EXISTS `lh__test`;
CREATE TABLE `lh__test` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `abigint` bigint(20) DEFAULT NULL,
  `adatetime` datetime DEFAULT NULL,
  `astring` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `afloat` float DEFAULT NULL,
  `adecimal` decimal(64,8) DEFAULT NULL,
  `res_metal` decimal(64,4) DEFAULT NULL,
  `res_crystal` decimal(64,0) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

 */

sn_db_transaction_start();
//$fleet = new Fleet();
//
//$raisedError = false;
//try {
//  $fleet->dbSave();
//} catch (Exception $e) {
//  $raisedError = true;
//}

//$fleet->dbLoad(103);
//
////$fleet_row = doquery("SELECT * FROM {{fleets}} WHERE fleet_id = 80;", true);
////$fleet_row = doquery("SELECT * FROM {{fleets}} WHERE fleet_id = 8;", true);
////pdump($fleet_row);
////$fleet->dbRowParse($fleet_row);
////pdie('disabled for debug purposes');
//
////$fleet->setDbId(0);
////$fleet->unitList->unitZeroDbId();
////pvar_dump($fleet->unitList[1131268]);
////pdie('disabled for debug purposes');
//
//
//
//pdump(property_exists($fleet->unitList[1131268], 'count'), 'count exists');
//pdump($fleet->unitList[1131268]->count);
//$fleet->unitList[1131268]->adjustCount(-1);
//pdump($fleet->unitList[1131268]->count);
//
//$fleet->dbSave();
//
//pvar_dump($fleet->unitList);
//
////$fleet->unitList->unitZeroCount();
////$fleet->dbSave();

//pdie('disabled for debug purposes');


//sn_db_transaction_commit();

pdie('tests completed');